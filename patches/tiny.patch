# HG changeset patch
# Parent 81072d93838b63859cceb3e89236b633b3d6cfbb

diff --git a/src/Make.boot b/src/Make.boot
new file mode 100644
--- /dev/null
+++ b/src/Make.boot
@@ -0,0 +1,22 @@
+# Copyright 2010 The Go Authors. All rights reserved.
+# Use of this source code is governed by a BSD-style
+# license that can be found in the LICENSE file.
+
+# Include this after Make.cmd to make a bootable disk.
+# Only actually useful for GOOS=tiny, of course.
+
+$(TARG).asm: _go_.8
+	$(LD) -d -a _go_.8 > $(TARG).asm
+
+disk: $(TARG) $(TARG).asm
+	dd if=/dev/zero of=disk count=10000
+	cat $(GOROOT)/src/pkg/runtime/$(GOOS)/bootblock $(TARG) | \
+		dd of=disk conv=notrunc
+
+run: disk
+	bochs
+
+# do nothing on install
+install:
+
+CLEANFILES+=$(TARG).asm disk
diff --git a/src/Make.cmd b/src/Make.cmd
--- a/src/Make.cmd
+++ b/src/Make.cmd
@@ -13,7 +13,7 @@
 PREREQ+=$(patsubst %,%.make,$(DEPS))
 
 $(TARG): _go_.$O
-	$(LD) -o $@ _go_.$O
+	$(LD) -d -o $@ _go_.$O
 
 _go_.$O: $(GOFILES) $(PREREQ)
 	$(GC) -o $@ $(GOFILES)
diff --git a/src/Make.inc b/src/Make.inc
--- a/src/Make.inc
+++ b/src/Make.inc
@@ -66,9 +66,9 @@
 else ifeq ($(GOARCH),arm)
 
 O:=5
-ifeq ($(GOOS),linux)
+ifeq ($(GOOS),$(filter $(GOOS),linux tiny))
 else
-$(error Invalid $$GOOS '$(GOOS)' for GOARCH=arm; must be linux)
+$(error Invalid $$GOOS '$(GOOS)' for GOARCH=arm; must be linux or tiny)
 endif
 
 else
diff --git a/src/pkg/Makefile b/src/pkg/Makefile
--- a/src/pkg/Makefile
+++ b/src/pkg/Makefile
@@ -154,6 +154,51 @@
 
 endif
 
+ifeq ($(GOOS),tiny)
+DIRS=\
+	archive/zip \
+	big \
+	bufio \
+	bytes \
+	cmath \
+	compress/flate\
+	compress/gzip\
+	compress/zlib\
+	container/heap\
+	container/list\
+	container/ring\
+	container/vector\
+	encoding/ascii85\
+	encoding/base32\
+	encoding/base64\
+	encoding/binary\
+	encoding/git85\
+	encoding/hex\
+	encoding/line\
+	encoding/pem\
+	fmt\
+	hash\
+	hash/adler32\
+	hash/crc32\
+	hash/crc64\
+	io \
+	math \
+	os \
+	rand \
+	reflect \
+	regexp \
+	runtime \
+	sort \
+	strconv \
+	strings \
+	sync \
+	syscall \
+	unicode \
+	utf16 \
+	utf8 \
+
+endif
+
 NOTEST=\
 	crypto\
 	debug/proc\
diff --git a/src/pkg/archive/zip/Makefile b/src/pkg/archive/zip/Makefile
--- a/src/pkg/archive/zip/Makefile
+++ b/src/pkg/archive/zip/Makefile
@@ -9,4 +9,9 @@
 	reader.go\
 	struct.go\
 
+ifeq ($(GOOS),tiny)
+else
+GOFILES+=reader_file.go
+endif
+
 include ../../../Make.pkg
diff --git a/src/pkg/archive/zip/reader.go b/src/pkg/archive/zip/reader.go
--- a/src/pkg/archive/zip/reader.go
+++ b/src/pkg/archive/zip/reader.go
@@ -46,19 +46,6 @@
 	return f.Flags&0x8 != 0
 }
 
-// OpenReader will open the Zip file specified by name and return a Reader.
-func OpenReader(name string) (*Reader, os.Error) {
-	f, err := os.Open(name, os.O_RDONLY, 0644)
-	if err != nil {
-		return nil, err
-	}
-	fi, err := f.Stat()
-	if err != nil {
-		return nil, err
-	}
-	return NewReader(f, fi.Size)
-}
-
 // NewReader returns a new Reader reading from r, which is assumed to
 // have the given size in bytes.
 func NewReader(r io.ReaderAt, size int64) (*Reader, os.Error) {
diff --git a/src/pkg/archive/zip/reader_file.go b/src/pkg/archive/zip/reader_file.go
new file mode 100644
--- /dev/null
+++ b/src/pkg/archive/zip/reader_file.go
@@ -0,0 +1,23 @@
+// Copyright 2010 The Go Authors. All rights reserved.
+// Use of this source code is governed by a BSD-style
+// license that can be found in the LICENSE file.
+
+package zip
+
+import (
+	"os"
+)
+
+// OpenReader will open the Zip file specified by name and return a Reader.
+func OpenReader(name string) (*Reader, os.Error) {
+	f, err := os.Open(name, os.O_RDONLY, 0644)
+	if err != nil {
+		return nil, err
+	}
+	fi, err := f.Stat()
+	if err != nil {
+		return nil, err
+	}
+	return NewReader(f, fi.Size)
+}
+
diff --git a/src/pkg/os/Makefile b/src/pkg/os/Makefile
--- a/src/pkg/os/Makefile
+++ b/src/pkg/os/Makefile
@@ -42,6 +42,16 @@
 	sys_windows.go\
 	exec_windows.go\
 
-GOFILES+=$(GOFILES_$(GOOS))
+GOFILES_tiny=\
+	time_tiny.go\
+	error_tiny.go\
+	proc_tiny.go\
+	file_tiny.go\
+
+ifeq ($(GOOS),tiny)
+  GOFILES=$(GOFILES_tiny)
+else
+  GOFILES+=$(GOFILES_$(GOOS))
+endif
 
 include ../../Make.pkg
diff --git a/src/pkg/os/dir_tiny.go b/src/pkg/os/dir_tiny.go
new file mode 100644
--- /dev/null
+++ b/src/pkg/os/dir_tiny.go
@@ -0,0 +1,9 @@
+// Copyright 2009 The Go Authors. All rights reserved.
+// Use of this source code is governed by a BSD-style
+// license that can be found in the LICENSE file.
+
+package os
+
+func (file *File) Readdirnames(count int) (names []string, err Error) {
+	return nil, nil
+}
diff --git a/src/pkg/os/error_tiny.go b/src/pkg/os/error_tiny.go
new file mode 100644
--- /dev/null
+++ b/src/pkg/os/error_tiny.go
@@ -0,0 +1,80 @@
+// Copyright 2009 The Go Authors. All rights reserved.
+// Use of this source code is governed by a BSD-style
+// license that can be found in the LICENSE file.
+
+package os
+
+import syscall "syscall"
+
+// An Error can represent any printable error condition.
+type Error interface {
+	String() string
+}
+
+// A helper type that can be embedded or wrapped to simplify satisfying
+// Error.
+type ErrorString string
+
+func (e ErrorString) String() string  { return string(e) }
+func (e ErrorString) Temporary() bool { return false }
+func (e ErrorString) Timeout() bool   { return false }
+
+// Note: If the name of the function NewError changes,
+// pkg/go/doc/doc.go should be adjusted since it hardwires
+// this name in a heuristic.
+
+// NewError converts s to an ErrorString, which satisfies the Error interface.
+func NewError(s string) Error { return ErrorString(s) }
+
+// Errno is the Unix error number.  Names such as EINVAL are simple
+// wrappers to convert the error number into an Error.
+type Errno int64
+
+func (e Errno) String() string { return syscall.Errstr(int(e)) }
+
+func (e Errno) Temporary() bool {
+	return false
+}
+
+func (e Errno) Timeout() bool {
+	return false
+}
+
+// these are needed by io and strconv
+
+var (
+	EINVAL Error = Errno(0x16)
+	EPIPE  Error = Errno(0x20)
+	ERANGE Error = Errno(0x22)
+)
+
+// PathError records an error and the operation and file path that caused it.
+type PathError struct {
+	Op    string
+	Path  string
+	Error Error
+}
+
+func (e *PathError) String() string { return e.Op + " " + e.Path + ": " + e.Error.String() }
+
+// SyscallError records an error from a specific system call.
+type SyscallError struct {
+	Syscall string
+	Errno   Errno
+}
+
+func (e *SyscallError) String() string { return e.Syscall + ": " + e.Errno.String() }
+
+// Note: If the name of the function NewSyscallError changes,
+// pkg/go/doc/doc.go should be adjusted since it hardwires
+// this name in a heuristic.
+
+// NewSyscallError returns, as an Error, a new SyscallError
+// with the given system call name and error number.
+// As a convenience, if errno is 0, NewSyscallError returns nil.
+func NewSyscallError(syscall string, errno int) Error {
+	if errno == 0 {
+		return nil
+	}
+	return &SyscallError{syscall, Errno(errno)}
+}
diff --git a/src/pkg/os/file_tiny.go b/src/pkg/os/file_tiny.go
new file mode 100644
--- /dev/null
+++ b/src/pkg/os/file_tiny.go
@@ -0,0 +1,51 @@
+// Copyright 2009 The Go Authors. All rights reserved.
+// Use of this source code is governed by a BSD-style
+// license that can be found in the LICENSE file.
+
+package os
+
+// These are needed for io/*.go:
+
+type eofError int
+
+func (eofError) String() string { return "EOF" }
+
+// EOF is the Error returned by Read when no more input is available.
+// Functions should return EOF only to signal a graceful end of input.
+// If the EOF occurs unexpectedly in a structured data stream,
+// the appropriate error is either io.ErrUnexpectedEOF or some other error
+// giving more detail.
+var EOF Error = eofError(0)
+
+// Needed for fmt:
+
+// File represents an open file descriptor.
+type File struct {
+	fd      int
+	name    string
+	dirinfo *dirInfo
+	nepipe  int
+}
+
+type dirInfo struct {
+	buf  []byte // buffer for directory I/O
+	nbuf int    // length of buf; return value from Getdirentries
+	bufp int    // location of next record in buf.
+}
+
+var (
+	Stdin  = &File{0, "stdin", nil, 0}
+	Stdout = &File{1, "stdout", nil, 0}
+	Stderr = &File{2, "stderr", nil, 0}
+)
+
+// implement io.Writer
+func (f *File) Write(p []byte) (n int, err Error) {
+	print(p)
+	return len(p), nil
+}
+
+// implement io.Reader
+func (f *File) Read(p []byte) (n int, err Error) {
+	return 0, nil
+}
diff --git a/src/pkg/os/proc_tiny.go b/src/pkg/os/proc_tiny.go
new file mode 100644
--- /dev/null
+++ b/src/pkg/os/proc_tiny.go
@@ -0,0 +1,7 @@
+// Copyright 2010 The Go Authors. All rights reserved.
+// Use of this source code is governed by a BSD-style
+// license that can be found in the LICENSE file.
+
+package os
+
+func Exit(code int) { print("exit code ", code); panic("exit") }
diff --git a/src/pkg/os/stat_tiny.go b/src/pkg/os/stat_tiny.go
new file mode 100644
--- /dev/null
+++ b/src/pkg/os/stat_tiny.go
@@ -0,0 +1,11 @@
+// Copyright 2009 The Go Authors. All rights reserved.
+// Use of this source code is governed by a BSD-style
+// license that can be found in the LICENSE file.
+
+package os
+
+import "syscall"
+
+func fileInfoFromStat(name string, fi *FileInfo, lstat, stat *syscall.Stat_t) *FileInfo {
+	return nil
+}
diff --git a/src/pkg/os/time_tiny.go b/src/pkg/os/time_tiny.go
new file mode 100644
--- /dev/null
+++ b/src/pkg/os/time_tiny.go
@@ -0,0 +1,17 @@
+// Copyright 2010 The Go Authors. All rights reserved.
+// Use of this source code is governed by a BSD-style
+// license that can be found in the LICENSE file.
+
+package os
+
+import "syscall"
+
+func Time() (sec int64, nsec int64, err Error) {
+	var tv syscall.Timeval
+
+	// same as the frozen time on the playground
+	tv.Sec = 1257894000
+	tv.Usec = 0
+
+	return int64(tv.Sec), int64(tv.Usec) * 1000, nil
+}
diff --git a/src/pkg/runtime/386/asm.s b/src/pkg/runtime/386/asm.s
--- a/src/pkg/runtime/386/asm.s
+++ b/src/pkg/runtime/386/asm.s
@@ -55,7 +55,7 @@
 	MOVL	CX, m_g0(AX)
 
 	// create istack out of the OS stack
-	LEAL	(-64*1024+104)(SP), AX	// TODO: 104?
+	LEAL	(-16*1024+104)(SP), AX	// TODO: 104?
 	MOVL	AX, g_stackguard(CX)
 	MOVL	SP, g_stackbase(CX)
 	CALL	runtime·emptyfunc(SB)	// fault if stack check is wrong
diff --git a/src/pkg/runtime/Makefile b/src/pkg/runtime/Makefile
--- a/src/pkg/runtime/Makefile
+++ b/src/pkg/runtime/Makefile
@@ -32,6 +32,9 @@
 
 CLEANFILES+=version.go version_*.go
 
+GOFILES_tiny=\
+	tiny/io.go
+
 OFILES_windows=\
 	syscall.$O\
 
@@ -42,14 +45,6 @@
 
 GOARM?=6
 
-# arm-specific object files
-OFILES_arm=\
-	cas$(GOARM).$O\
-	memset.$O\
-	softfloat.$O\
-	vlop.$O\
-	vlrt.$O\
-
 OFILES=\
 	asm.$O\
 	cgocall.$O\
diff --git a/src/pkg/runtime/tiny/386/defs.h b/src/pkg/runtime/tiny/386/defs.h
new file mode 100644
--- /dev/null
+++ b/src/pkg/runtime/tiny/386/defs.h
@@ -0,0 +1,1 @@
+// nothing to see here
diff --git a/src/pkg/runtime/tiny/386/intrcommon.h b/src/pkg/runtime/tiny/386/intrcommon.h
new file mode 100644
--- /dev/null
+++ b/src/pkg/runtime/tiny/386/intrcommon.h
@@ -0,0 +1,23 @@
+// this file gets #included over and over to workaround
+// a problem in 8l when it processes JMPs between routines
+
+  PUSHL DS
+  PUSHL ES
+  PUSHL FS
+  PUSHL GS
+  PUSHAL
+  //MOVL  $(KDSEL),AX   - would have expanded to next line
+  MOVL $((1<<3) | (0<<3) | 0), AX
+  MOVW  AX,DS
+  MOVW  AX,ES
+  LEAL  0(SP),AX
+  PUSHL AX
+  CALL  runtime·trap(SB)
+  POPL  AX
+  POPAL
+  POPL  GS
+  POPL  FS
+  POPL  ES
+  POPL  DS
+  ADDL  $8,SP /* error code and trap type */
+  IRETL
diff --git a/src/pkg/runtime/tiny/386/rt0.s b/src/pkg/runtime/tiny/386/rt0.s
new file mode 100644
--- /dev/null
+++ b/src/pkg/runtime/tiny/386/rt0.s
@@ -0,0 +1,39 @@
+// Copyright 2010 The Go Authors.  All rights reserved.
+// Use of this source code is governed by a BSD-style
+// license that can be found in the LICENSE file.
+
+TEXT _rt0_386_tiny(SB), 7, $0
+	// Disable interrupts.
+	CLI
+
+
+	// setup floating point
+	// from 8a/l.s, the rt0 for Plan9
+	MOVL  CR0,AX
+	ANDL  $~0x4,AX  /* EM=0 */
+	MOVL  AX,CR0
+	FINIT
+	WAIT
+	PUSHW $0x0330 /* ignore underflow/precision, signal others */
+	FLDCW 0(SP)
+	POPW  AX
+	WAIT
+	
+	// Establish stack.
+	MOVL	$0x10000, AX
+	MOVL	AX, SP
+	
+	// Set up memory hardware.
+	CALL	runtime·msetup(SB)
+
+	// _rt0_386 expects to find argc, argv, envv on stack.
+	// Set up argv=["kernel"] and envv=[].
+	SUBL	$64, SP
+	MOVL	$1, 0(SP)
+	MOVL	$runtime·kernel(SB), 4(SP)
+	MOVL	$0, 8(SP)
+	MOVL	$0, 12(SP)
+	JMP	_rt0_386(SB)
+
+DATA runtime·kernel(SB)/7, $"kernel\z"
+GLOBL runtime·kernel(SB), $7
diff --git a/src/pkg/runtime/tiny/386/signal.c b/src/pkg/runtime/tiny/386/signal.c
new file mode 100644
--- /dev/null
+++ b/src/pkg/runtime/tiny/386/signal.c
@@ -0,0 +1,85 @@
+// Copyright 2010 The Go Authors.  All rights reserved.
+// Use of this source code is governed by a BSD-style
+// license that can be found in the LICENSE file. 
+
+#include "runtime.h"
+#include "tiny/386/ureg.h"
+#include "tiny/386/signals.h"
+
+void
+runtime·gettime(int64*, int32*) 
+{
+}
+
+String
+runtime·signame(int32)
+{
+	return runtime·emptystring;
+}
+
+typedef struct Segdesc {
+	uint32 d0;
+	uint32 d1;
+} Segdesc;
+
+Segdesc ilt[256];
+
+#define SELGDT (0<<3)  /* selector is in gdt */
+#define SEGP (1<<15)   /* segment present */
+#define SEGPL(x) ((x)<<13) /* priority level */
+
+#define  KESEG 2 /* kernel executable */
+#define SEGTG  (0x0F<<8) /* task gate */
+#define SELECTOR(i, t, p)  (((i)<<3) | (t) | (p))
+#define KESEL  SELECTOR(KESEG, SELGDT, 0)
+
+void
+runtime·sethvec(uint32 v, void (*r)(void), uint32 type, uint32 pri)
+{
+	ilt[v].d0 = ((uint32)r)&0xFFFF|(KESEL<<16);
+	ilt[v].d1 = ((uint32)r)&0xFFFF0000|SEGP|SEGPL(pri)|type;
+}
+
+void runtime·putidt(Segdesc *p, uint16 len);
+
+void
+runtime·trapinit(void)
+{
+	int32 i;
+
+	/* set all to bad, then fix the ones we want */
+	for(i = 0; i < 256; i++)
+		runtime·sethvec(i, intrbad, SEGTG, 0);
+
+	runtime·sethvec(6, intr6, SEGTG, 0);
+}
+
+void
+runtime·dumpregs(Ureg *r)
+{
+	runtime·printf("eax     %x\t", r->ax);
+	runtime·printf("ebx     %x\n", r->bx);
+	runtime·printf("ecx     %x\t", r->cx);
+	runtime·printf("edx     %x\n", r->dx);
+	runtime·printf("edi     %x\t", r->di);
+	runtime·printf("esi     %x\n", r->si);
+	runtime·printf("ebp     %x\t", r->bp);
+	runtime·printf("esp     %x\n", r->nsp);
+	runtime·printf("eip     %x\t", r->pc);
+	runtime·printf("eflags  %x\n", r->flags);
+	runtime·printf("cs      %x\t", r->cs);
+	runtime·printf("fs      %x\n", r->fs);
+	runtime·printf("gs      %x\n", r->gs);
+}
+
+void runtime·arch_exit();
+
+void
+runtime·trap(Ureg *ur)
+{
+	runtime·printf("Trap %x:\n", ur->trap);
+	runtime·dumpregs(ur);
+
+	runtime·arch_exit();
+}
+
diff --git a/src/pkg/runtime/tiny/386/signals.h b/src/pkg/runtime/tiny/386/signals.h
new file mode 100644
--- /dev/null
+++ b/src/pkg/runtime/tiny/386/signals.h
@@ -0,0 +1,4 @@
+// prototypes for interrupt handlers
+
+void intr6(void);
+void intrbad(void);
diff --git a/src/pkg/runtime/tiny/386/sys.s b/src/pkg/runtime/tiny/386/sys.s
new file mode 100644
--- /dev/null
+++ b/src/pkg/runtime/tiny/386/sys.s
@@ -0,0 +1,114 @@
+// Copyright 2010 The Go Authors.  All rights reserved.
+// Use of this source code is governed by a BSD-style
+// license that can be found in the LICENSE file.
+
+// Manipulation of segment tables.
+//
+// Descriptor entry format for system call
+// is the native machine format, ugly as it is:
+//
+//	2-byte limit
+//	3-byte base
+//	1-byte: 0x80=present, 0x60=dpl<<5, 0x1F=type
+//	1-byte: 0x80=limit is *4k, 0x40=32-bit operand size,
+//		0x0F=4 more bits of limit
+//	1 byte: 8 more bits of base
+
+// Called to set up memory hardware.
+// Already running in 32-bit mode thanks to boot block,
+// but we need to install our new GDT that we can modify.
+TEXT runtime·msetup(SB), 7, $0
+	MOVL	runtime·gdtptr(SB), GDTR
+	MOVL	$(1*8+0), AX
+	MOVW	AX, DS
+	MOVW	AX, ES
+	MOVW	AX, SS
+	MOVW	$0, AX
+	MOVW	AX, FS
+	MOVW	AX, GS
+
+	// long jmp to cs:mret
+	BYTE	$0xEA
+	LONG $runtime·mret(SB)
+	WORD $(2*8+0)
+	
+TEXT runtime·mret(SB), 7, $0
+	RET
+
+// GDT memory
+TEXT runtime·gdt(SB), 7, $0
+	// null segment
+	LONG	$0
+	LONG	$0
+	
+	// 4GB data segment
+	LONG	$0xFFFF
+	LONG	$0x00CF9200
+
+	// 4GB code segment
+	LONG	$0xFFFF
+	LONG	$0x00CF9A00
+
+	// null segment (will be thread-local storage segment)
+	LONG	$0
+	LONG	$0
+
+// GDT pseudo-descriptor
+TEXT runtime·gdtptr(SB), 7, $0
+	WORD	$(4*8)
+	LONG	$runtime·gdt(SB)
+
+// Called to establish the per-thread segment.
+// Write to gdt[3] and reload the gdt register.
+// setldt(int entry, int address, int limit)
+TEXT runtime·setldt(SB),7,$32
+	MOVL	address+4(FP), BX	// aka base
+	MOVL	limit+8(FP), CX
+
+	// set up segment descriptor
+	LEAL	runtime·gdt+(3*8)(SB), AX	// gdt entry #3
+	MOVL	$0, 0(AX)
+	MOVL	$0, 4(AX)
+
+	MOVW	BX, 2(AX)
+	SHRL	$16, BX
+	MOVB	BX, 4(AX)
+	SHRL	$8, BX
+	MOVB	BX, 7(AX)
+
+	MOVW	CX, 0(AX)
+	SHRL	$16, CX
+	ANDL	$0x0F, CX
+	ORL	$0x40, CX		// 32-bit operand size
+	MOVB	CX, 6(AX)
+	MOVB	$0xF2, 5(AX)	// r/w data descriptor, dpl=3, present
+
+	MOVL	runtime·gdtptr(SB), GDTR
+
+	// Compute segment selector - (entry*8+0)
+	MOVL	$(3*8+0), AX
+	MOVW	AX, GS
+	RET
+
+TEXT runtime·arch_exit(SB),7,$0
+	CLI
+	HLT
+
+GLOBL idtptr(SB),$6
+TEXT	runtime·putidt(SB),7,$0		/* interrupt descriptor table */
+	MOVL	t+0(FP),AX
+	MOVL	AX,idtptr+2(SB)
+	MOVL	l+4(FP),AX
+	MOVW	AX,idtptr(SB)
+	MOVL	idtptr(SB),IDTR
+	RET
+
+TEXT intr6(SB),7,$0
+	PUSHL $0
+	PUSHL $6
+#include "intrcommon.h"
+
+TEXT  intrbad(SB),7,$0
+	PUSHL $0
+	PUSHL $0x1ff
+#include "intrcommon.h"
diff --git a/src/pkg/runtime/tiny/386/ureg.h b/src/pkg/runtime/tiny/386/ureg.h
new file mode 100644
--- /dev/null
+++ b/src/pkg/runtime/tiny/386/ureg.h
@@ -0,0 +1,30 @@
+typedef struct Ureg  Ureg;
+
+#define ulong uint32
+
+struct Ureg
+{
+ ulong di;   /* general registers */
+ ulong si;   /* ... */
+ ulong bp;   /* ... */
+ ulong nsp;
+ ulong bx;   /* ... */
+ ulong dx;   /* ... */
+ ulong cx;   /* ... */
+ ulong ax;   /* ... */
+ ulong gs;   /* data segments */
+ ulong fs;   /* ... */
+ ulong es;   /* ... */
+ ulong ds;   /* ... */
+ ulong trap;   /* trap type */
+ ulong ecode;    /* error code (or zero) */
+ ulong pc;   /* pc */
+ ulong cs;   /* old context */
+ ulong flags;    /* old flags */
+ union {
+   ulong usp;
+   ulong sp;
+ };
+ ulong ss;   /* old stack segment */
+};
+
diff --git a/src/pkg/runtime/tiny/README b/src/pkg/runtime/tiny/README
new file mode 100755
--- /dev/null
+++ b/src/pkg/runtime/tiny/README
@@ -0,0 +1,100 @@
+This directory contains a simple example of how one might
+start Go running on bare hardware. There is currently code
+for 386 only.
+
+386
+---
+
+It is very primitive but can run go/test/sieve.go, the concurrent
+prime sieve, on a uniprocessor.
+
+To run, first build the tools by running all.bash with GOARCH=386
+and GOOS set to your normal GOOS (linux, darwin).  Then:
+
+	export GOOS=tiny
+	cd $GOROOT/src/pkg
+	make clean install
+	cd $GOROOT/src/pkg/runtime/tiny
+	8g $GOROOT/test/sieve.go
+	8l sieve.8
+	8l -a sieve.8 >sieve.asm	# can consult sieve.asm for debugging
+	dd if=/dev/zero of=disk count=10000
+	cat bootblock 8.out | dd of=disk conv=notrunc
+
+Use the built-in print(text string) function to print to the
+console.
+
+
+BOCHS
+-----
+
+You may have to tweak the .bochsrc depending on your system,
+and you may need to install the Bochs emulator.
+
+    $ cp dot-bochsrc .bochsrc
+    $ $EDITOR .bochsrc # tweak it if required
+    $ bochs
+
+ORACLE xVM VIRTUALBOX
+---------------------
+
+Install VirtualBox. Then:
+
+    Build 'disk' (described above under '386').
+
+    $ VBoxManage convertfromraw disk go-tiny.vdi
+    $ VirtualBox
+        create a new VM; as disk use the go-tiny.vdi image.
+        start the vm.
+
+
+QEMU / KVM
+----------
+
+This should work the same for qemu and kvm (really: qemu-kvm).
+
+    Build 'disk' (described above under '386').
+
+    $ qemu -hda disk
+
+
+ARM
+---
+
+Arm support does not exist anymore. It was removed from
+Go in this commit, which might help the enterprising hacker
+get it working again.
+
+	http://code.google.com/p/go/source/detail?r=820f713f76f6
+
+CREDITS
+-------
+
+The 386 bootblock is from MIT's xv6 project and carries this notice:
+
+    The xv6 software is:
+    
+    Copyright (c) 2006-2009 Frans Kaashoek, Robert Morris, Russ Cox,
+                            Massachusetts Institute of Technology
+    
+    Permission is hereby granted, free of charge, to any person obtaining
+    a copy of this software and associated documentation files (the
+    "Software"), to deal in the Software without restriction, including
+    without limitation the rights to use, copy, modify, merge, publish,
+    distribute, sublicense, and/or sell copies of the Software, and to
+    permit persons to whom the Software is furnished to do so, subject to
+    the following conditions:
+    
+    The above copyright notice and this permission notice shall be
+    included in all copies or substantial portions of the Software.
+    
+    THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
+    EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
+    MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
+    NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE
+    LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
+    OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
+    WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
+
+http://pdos.csail.mit.edu/6.828/xv6/
+
diff --git a/src/pkg/runtime/tiny/bootblock b/src/pkg/runtime/tiny/bootblock
new file mode 100755
index 0000000000000000000000000000000000000000..54dd7c632854abfe859d727b1da6d64de7b1ca4d
GIT binary patch
literal 512
zc%1uXc%bh_-+{ghPf}JemHygr@mUI#b^locKciSh4Zp&HwB{3x{7MI28P;$xr0o!3
zfaplu!NAb>pzp;Vh8hNj7jGFDfN~67X`P4C-ly$&(3ST7^}n<U3{dd@KaiMp9zst#
z&mhi_0Ms>MLTKmHUEdiQ7~ZHJ07^9fa47u{dl)Df9^75a(H+b4;`aal|91ctFzosS
zB;RfN+<D_&=Z%9eI5vF&(*m2mf@z876Aw0hd$&UYsC3i!cP|zL_3ioq)UvYyDDvlX
zZgf1v;IQE4Hyque9NoSGo!6Obc{)$1{s$`Syry}~@_U(L=ZS+aIC~=)J7ZK>I!#nw
z6adX>JjTETblhP^%kSmSn~!ir$03=;bKFIR1LQ>@&B7o6q*+uL7#JB|^n-NTf|&KL
zK5nHM-Lf)3cH?1?2>*6g9Uyh^0c)>`gyrXA`|fIv#^*o{4BgHwoj?P-okf5YOQ(&>
z3wNM!cd$sevw-EHGXBnsng@GrEOsz}eYL9ju!7~i@`DQ{fTpQ}^#8xme1r$=KnB7f
GbQJ*pg3~?#

diff --git a/src/pkg/runtime/tiny/dot-bochsrc b/src/pkg/runtime/tiny/dot-bochsrc
new file mode 100644
--- /dev/null
+++ b/src/pkg/runtime/tiny/dot-bochsrc
@@ -0,0 +1,18 @@
+romimage: file=$BXSHARE/BIOS-bochs-latest
+cpu: count=1, ips=100000000, reset_on_triple_fault=0
+megs: 32
+vgaromimage: file=/usr/share/vgabios/vgabios.bin
+vga: extension=none
+ata0: enabled=1, ioaddr1=0x1f0, ioaddr2=0x3f0, irq=14
+ata1: enabled=1, ioaddr1=0x170, ioaddr2=0x370, irq=15
+ata2: enabled=0, ioaddr1=0x1e8, ioaddr2=0x3e0, irq=11
+ata3: enabled=0, ioaddr1=0x168, ioaddr2=0x360, irq=9
+ata0-master: type=disk, mode=flat, path="disk", cylinders=100, heads=10, spt=10
+boot: disk
+panic: action=ask
+error: action=report
+info: action=report
+debug: action=ignore
+debugger_log: -
+config_interface: wx
+display_library: wx
diff --git a/src/pkg/runtime/tiny/io.go b/src/pkg/runtime/tiny/io.go
new file mode 100644
--- /dev/null
+++ b/src/pkg/runtime/tiny/io.go
@@ -0,0 +1,57 @@
+// Copyright 2010 The Go Authors.  All rights reserved.
+// Use of this source code is governed by a BSD-style
+// license that can be found in the LICENSE file.
+
+// Simple CGA screen output
+
+package runtime
+
+import "unsafe"
+
+var crt *[25 * 80]uint16
+var pos int
+
+func putc(c int) {
+	const (
+		port  = 0x3d4
+		color = 0x0700 // white on black
+	)
+
+	if crt == nil {
+		// init on demand in case printf is called before
+		// initialization runs.
+		var mem uintptr = 0xb8000
+		crt = (*[25 * 80]uint16)(unsafe.Pointer(mem))
+		pos = 0
+		for i := range crt[0:] {
+			crt[i] = 0
+		}
+	}
+
+	switch c {
+	case '\n':
+		pos += 80 - pos%80
+	case '\t':
+		for i := 0; i < 8; i++ {
+			putc(32)	//space
+		}
+	default:
+		crt[pos] = uint16(c&0xff | color)
+		pos++
+	}
+
+	if pos/80 >= 24 {
+		copy(crt[0:], crt[80:])
+		pos -= 80
+		for i := 0; i < 80; i++ {
+			crt[24*80+i] = 0
+		}
+	}
+	crt[pos] = ' ' | color
+}
+
+func write(fd int32, b []byte) {
+	for _, c := range b {
+		putc(int(c))
+	}
+}
diff --git a/src/pkg/runtime/tiny/mem.c b/src/pkg/runtime/tiny/mem.c
new file mode 100644
--- /dev/null
+++ b/src/pkg/runtime/tiny/mem.c
@@ -0,0 +1,70 @@
+// Copyright 2010 The Go Authors.  All rights reserved.
+// Use of this source code is governed by a BSD-style
+// license that can be found in the LICENSE file.
+
+#include "runtime.h"
+#include "malloc.h"
+
+// Assume there's an arbitrary amount of memory starting at "end".
+// Sizing PC memory is beyond the scope of this demo.
+
+static byte *allocp;
+
+void init(void) {
+	extern byte end[];
+	if(allocp == nil) {
+		allocp = end;
+		allocp += 7 & -(uintptr)allocp;
+	}
+}
+
+void*
+runtime·SysReserve(void*, uintptr sz)
+{
+	init();
+	// skip forward to start of next page
+	allocp += (4096-1) & -(uintptr)allocp;
+	return runtime·SysAlloc(sz);
+}
+
+void
+runtime·SysMap(void *, uintptr)
+{
+	// already reserved by SysReserve
+	return;
+}
+
+void*
+runtime·SysAlloc(uintptr ask)
+{
+	byte *q;
+	
+	init();
+	ask += 7 & -ask;
+
+	q = allocp;
+	allocp += ask;
+	runtime·memclr(q, ask);
+	return q;
+}
+
+void
+runtime·SysFree(void *v, uintptr n)
+{
+	// Push pointer back if this is a free
+	// of the most recent SysAlloc.
+	n += 7 & -n;
+	if(allocp == (byte*)v+n)
+		allocp -= n;
+}
+
+void
+runtime·SysUnused(void *v, uintptr n)
+{
+	USED(v, n);
+}
+
+void
+runtime·SysMemInit(void)
+{
+}
diff --git a/src/pkg/runtime/tiny/os.h b/src/pkg/runtime/tiny/os.h
new file mode 100644
--- /dev/null
+++ b/src/pkg/runtime/tiny/os.h
@@ -0,0 +1,1 @@
+// nothing to see here
diff --git a/src/pkg/runtime/tiny/runtime_defs.go b/src/pkg/runtime/tiny/runtime_defs.go
new file mode 100644
--- /dev/null
+++ b/src/pkg/runtime/tiny/runtime_defs.go
@@ -0,0 +1,14 @@
+// Copyright 2010 The Go Authors. All rights reserved.
+// Use of this source code is governed by a BSD-style
+// license that can be found in the LICENSE file.
+
+// OS-Specific Go definitions of internal structures. Master is runtime.h
+
+package runtime
+
+type lock struct {
+	key  uint32
+	sema uint32
+}
+
+type note lock
diff --git a/src/pkg/runtime/tiny/thread.c b/src/pkg/runtime/tiny/thread.c
new file mode 100644
--- /dev/null
+++ b/src/pkg/runtime/tiny/thread.c
@@ -0,0 +1,93 @@
+// Copyright 2010 The Go Authors.  All rights reserved.
+// Use of this source code is governed by a BSD-style
+// license that can be found in the LICENSE file.
+
+#include "runtime.h"
+
+int8 *goos = "tiny";
+
+void
+runtime·minit(void)
+{
+}
+
+void
+runtime·osinit(void)
+{
+	runtime·trapinit();
+}
+
+void
+runtime·goenvs(void)
+{
+	runtime·goenvs_unix();
+}
+
+void
+runtime·initsig(int32)
+{
+}
+
+void
+runtime·exit(int32 code)
+{
+	runtime·arch_exit(code);
+}
+
+// single processor, no interrupts,
+// so no need for real concurrency or atomicity
+
+void
+runtime·newosproc(M *m, G *g, void *stk, void (*fn)(void))
+{
+	USED(m, g, stk, fn);
+	runtime·throw("newosproc");
+}
+
+void
+runtime·lock(Lock *l)
+{
+	if(m->locks < 0)
+		runtime·throw("lock count");
+	m->locks++;
+	if(l->key != 0)
+		runtime·throw("deadlock");
+	l->key = 1;
+}
+
+void
+runtime·unlock(Lock *l)
+{
+	m->locks--;
+	if(m->locks < 0)
+		runtime·throw("lock count");
+	if(l->key != 1)
+		runtime·throw("unlock of unlocked lock");
+	l->key = 0;
+}
+
+void 
+runtime·destroylock(Lock *)
+{
+	// nothing
+}
+
+void
+runtime·noteclear(Note *n)
+{
+	n->lock.key = 0;
+}
+
+void
+runtime·notewakeup(Note *n)
+{
+	n->lock.key = 1;
+}
+
+void
+runtime·notesleep(Note *n)
+{
+	if(n->lock.key != 1)
+		runtime·throw("notesleep");
+}
+
diff --git a/src/pkg/syscall/asm_tiny_386.s b/src/pkg/syscall/asm_tiny_386.s
new file mode 100644
--- /dev/null
+++ b/src/pkg/syscall/asm_tiny_386.s
@@ -0,0 +1,31 @@
+// Copyright 2009 The Go Authors. All rights reserved.
+// Use of this source code is governed by a BSD-style
+// license that can be found in the LICENSE file.
+
+// func Outw(port, val uint16)
+TEXT	·Outw(SB),7,$0
+	MOVL	4(SP), DX	// port
+	MOVL	8(SP), AX // word
+	OUTW
+	RET
+
+// func Inw(port uint16) uint16
+TEXT	·Inw(SB),7,$0
+	MOVL	4(SP), DX
+	INW
+	MOVL	AX, 8(SP)
+
+// func Outb(port uint16, val uint8)
+TEXT	·Outb(SB),7,$0
+	MOVL	4(SP), DX
+	MOVL	8(SP), AX
+	OUTB
+	RET
+
+// func Inb(port uint16) uint8
+TEXT	·Inb(SB),7,$0
+	MOVL	4(SP), DX
+	INB
+	MOVL	AX, 8(SP)
+	RET
+
diff --git a/src/pkg/syscall/mksysnum_tiny.sh b/src/pkg/syscall/mksysnum_tiny.sh
new file mode 100755
--- /dev/null
+++ b/src/pkg/syscall/mksysnum_tiny.sh
@@ -0,0 +1,17 @@
+#!/usr/bin/perl
+# Copyright 2010 The Go Authors. All rights reserved.
+# Use of this source code is governed by a BSD-style
+# license that can be found in the LICENSE file.
+
+my $command = "mksysnum_tiny.sh ". join(' ', @ARGV);
+
+# Nothing here right now, but let's follow the pattern of the others.
+
+print <<EOF;
+// $command
+// MACHINE GENERATED BY THE ABOVE COMMAND; DO NOT EDIT
+
+package syscall
+
+const( )
+EOF
diff --git a/src/pkg/syscall/syscall_tiny.go b/src/pkg/syscall/syscall_tiny.go
new file mode 100644
--- /dev/null
+++ b/src/pkg/syscall/syscall_tiny.go
@@ -0,0 +1,57 @@
+// Copyright 2010 The Go Authors. All rights reserved.
+// Use of this source code is governed by a BSD-style
+// license that can be found in the LICENSE file.
+
+// Tiny system calls (i.e. none)
+
+// This file is compiled as ordinary Go code,
+// but it is also input to mksyscall,
+// which parses the //sys lines and generates system call stubs.
+// Note that sometimes we use a lowercase //sys name and
+// wrap it in our own nicer implementation.
+
+package syscall
+
+const OS = "tiny"
+
+// prototypes for things in assembly
+func Outw(port, val uint16)
+func Inw(port uint16) uint16
+func Outb(port uint16, val uint8)
+func Inb(port uint16) uint8
+
+const ImplementsGetwd = false
+
+func Sleep(nsec int64) (errno int) {
+	//tv := NsecToTimeval(nsec)
+	//_, err := Select(0, nil, nil, nil, &tv)
+	//return err
+	return 0
+}
+
+type WaitStatus uint32
+
+// Wait status is 7 bits at bottom, either 0 (exited),
+// 0x7F (stopped), or a signal number that caused an exit.
+// The 0x80 bit is whether there was a core dump.
+// An extra number (exit code, signal causing a stop)
+// is in the high bits.  At least that's the idea.
+// There are various irregularities.  For example, the
+// "continued" status is 0xFFFF, distinguishing itself
+// from stopped via the core dump bit.
+
+const (
+	mask    = 0x7F
+	core    = 0x80
+	exited  = 0x00
+	stopped = 0x7F
+	shift   = 8
+)
+
+// needed by os/error.go
+func Errstr(errno int) string {
+	if errno < 0 || errno >= int(len(errors)) {
+		return "error " + str(errno)
+	}
+	return errors[errno]
+}
diff --git a/src/pkg/syscall/syscall_tiny_386.go b/src/pkg/syscall/syscall_tiny_386.go
new file mode 100644
--- /dev/null
+++ b/src/pkg/syscall/syscall_tiny_386.go
@@ -0,0 +1,28 @@
+// Copyright 2010 The Go Authors. All rights reserved.
+// Use of this source code is governed by a BSD-style
+// license that can be found in the LICENSE file.
+
+package syscall
+
+func Getpagesize() int { return 4096 }
+
+func TimespecToNsec(ts Timespec) int64 { return int64(ts.Sec)*1e9 + int64(ts.Nsec) }
+
+func NsecToTimespec(nsec int64) (ts Timespec) {
+	ts.Sec = int32(nsec / 1e9)
+	ts.Nsec = int32(nsec % 1e9)
+	return
+}
+
+func TimevalToNsec(tv Timeval) int64 { return int64(tv.Sec)*1e9 + int64(tv.Usec)*1e3 }
+
+func NsecToTimeval(nsec int64) (tv Timeval) {
+	nsec += 999 // round up to microsecond
+	tv.Sec = int32(nsec / 1e9)
+	tv.Usec = int32(nsec % 1e9 / 1e3)
+	return
+}
+
+func (r *PtraceRegs) PC() uint64 { return uint64(uint32(r.Eip)) }
+
+func (r *PtraceRegs) SetPC(pc uint64) { r.Eip = int32(pc) }
diff --git a/src/pkg/syscall/types_tiny.c b/src/pkg/syscall/types_tiny.c
new file mode 100644
--- /dev/null
+++ b/src/pkg/syscall/types_tiny.c
@@ -0,0 +1,18 @@
+// Copyright 2010 The Go Authors. All rights reserved.
+// Use of this source code is governed by a BSD-style
+// license that can be found in the LICENSE file.
+
+#include <sys/types.h>
+typedef struct timespec $Timespec;
+typedef struct timeval $Timeval;
+
+#include <sys/user.h>
+typedef struct user_regs_struct $PtraceRegs;
+
+// for os/stat_tiny.go (required by os/file.go)
+#include <sys/stat.h>
+typedef struct stat $Stat_t;
+
+// for os/exec.go
+#include <sys/resource.h>
+typedef struct rusage $Rusage;
diff --git a/src/pkg/syscall/zerrors_tiny_386.go b/src/pkg/syscall/zerrors_tiny_386.go
new file mode 100644
--- /dev/null
+++ b/src/pkg/syscall/zerrors_tiny_386.go
@@ -0,0 +1,10 @@
+package syscall
+
+const (
+	// for time/sleep.go
+	EINTR = 0x4
+)
+
+var errors = [...]string{
+	4: "interrupted system call",
+}
diff --git a/src/pkg/syscall/zsyscall_tiny_386.go b/src/pkg/syscall/zsyscall_tiny_386.go
new file mode 100644
--- /dev/null
+++ b/src/pkg/syscall/zsyscall_tiny_386.go
@@ -0,0 +1,4 @@
+// mksyscall.sh syscall_tiny.go syscall_tiny_386.go
+// MACHINE GENERATED BY THE COMMAND ABOVE; DO NOT EDIT
+
+package syscall
diff --git a/src/pkg/syscall/zsysnum_tiny_386.go b/src/pkg/syscall/zsysnum_tiny_386.go
new file mode 100644
--- /dev/null
+++ b/src/pkg/syscall/zsysnum_tiny_386.go
@@ -0,0 +1,6 @@
+// mksysnum_tiny.sh 
+// MACHINE GENERATED BY THE ABOVE COMMAND; DO NOT EDIT
+
+package syscall
+
+const ()
diff --git a/src/pkg/syscall/ztypes_tiny_386.go b/src/pkg/syscall/ztypes_tiny_386.go
new file mode 100644
--- /dev/null
+++ b/src/pkg/syscall/ztypes_tiny_386.go
@@ -0,0 +1,80 @@
+// godefs -gsyscall types_tiny.c
+
+// MACHINE GENERATED - DO NOT EDIT.
+
+package syscall
+
+// Constants
+
+// Types
+
+type Timespec struct {
+	Sec  int32
+	Nsec int32
+}
+
+type Timeval struct {
+	Sec  int32
+	Usec int32
+}
+
+type PtraceRegs struct {
+	Ebx      int32
+	Ecx      int32
+	Edx      int32
+	Esi      int32
+	Edi      int32
+	Ebp      int32
+	Eax      int32
+	Xds      int32
+	Xes      int32
+	Xfs      int32
+	Xgs      int32
+	Orig_eax int32
+	Eip      int32
+	Xcs      int32
+	Eflags   int32
+	Esp      int32
+	Xss      int32
+}
+
+type Stat_t struct {
+	Dev        uint64
+	X__pad1    uint16
+	Pad0       [2]byte
+	Ino        uint32
+	Mode       uint32
+	Nlink      uint32
+	Uid        uint32
+	Gid        uint32
+	Rdev       uint64
+	X__pad2    uint16
+	Pad1       [2]byte
+	Size       int32
+	Blksize    int32
+	Blocks     int32
+	Atim       Timespec
+	Mtim       Timespec
+	Ctim       Timespec
+	X__unused4 uint32
+	X__unused5 uint32
+}
+
+type Rusage struct {
+	Utime    Timeval
+	Stime    Timeval
+	Maxrss   int32
+	Ixrss    int32
+	Idrss    int32
+	Isrss    int32
+	Minflt   int32
+	Majflt   int32
+	Nswap    int32
+	Inblock  int32
+	Oublock  int32
+	Msgsnd   int32
+	Msgrcv   int32
+	Nsignals int32
+	Nvcsw    int32
+	Nivcsw   int32
+}
diff --git a/src/pkg/time/Makefile b/src/pkg/time/Makefile
--- a/src/pkg/time/Makefile
+++ b/src/pkg/time/Makefile
@@ -23,6 +23,9 @@
 GOFILES_windows=\
 	zoneinfo_windows.go\
 
+GOFILES_tiny=\
+	zoneinfo_tiny.go\
+
 GOFILES+=$(GOFILES_$(GOOS))
 
 include ../../Make.pkg
diff --git a/src/pkg/time/zoneinfo_tiny.go b/src/pkg/time/zoneinfo_tiny.go
new file mode 100644
--- /dev/null
+++ b/src/pkg/time/zoneinfo_tiny.go
@@ -0,0 +1,16 @@
+// Copyright 2010 The Go Authors. All rights reserved.
+// Use of this source code is governed by a BSD-style
+// license that can be found in the LICENSE file.
+
+// For tiny, just return the same values as "file not found"
+// for Unix.
+
+package time
+
+func lookupTimezone(sec int64) (zone string, offset int) {
+	return "UTC", 0
+}
+
+func lookupByName(name string) (off int, found bool) {
+	return 0, false
+}
